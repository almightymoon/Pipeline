# ===========================================================
# Distributed ML Training Job with DeepSpeed
# ===========================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: deepspeed-training-job
  namespace: ml-pipeline
  labels:
    app.kubernetes.io/name: deepspeed-training
    app.kubernetes.io/component: training
    app.kubernetes.io/part-of: ml-pipeline
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: deepspeed-training
        app.kubernetes.io/component: training
    spec:
      restartPolicy: Never
      serviceAccountName: ml-training-sa
      containers:
      - name: trainer
        image: harbor.example.com/ml-team/deepspeed:latest
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          echo "Starting DeepSpeed training job..."
          
          # Set up distributed training environment
          export MASTER_ADDR=$(hostname -f)
          export MASTER_PORT=29500
          export WORLD_SIZE=${WORLD_SIZE:-4}
          export RANK=${RANK:-0}
          export LOCAL_RANK=${LOCAL_RANK:-0}
          
          # Launch DeepSpeed training
          deepspeed \
            --num_gpus=${GPU_COUNT:-4} \
            --num_nodes=${WORLD_SIZE:-1} \
            --master_addr=${MASTER_ADDR} \
            --master_port=${MASTER_PORT} \
            train.py \
            --config configs/model-config.yaml \
            --deepspeed configs/deepspeed.json \
            --output_dir /models/checkpoints \
            --logging_dir /logs/training \
            --run_name "ml-pipeline-$(date +%Y%m%d-%H%M%S)"
          
          echo "Training completed successfully"
        
        env:
        - name: GPU_COUNT
          value: "4"
        - name: WORLD_SIZE
          value: "1"
        - name: RANK
          value: "0"
        - name: LOCAL_RANK
          value: "0"
        - name: CUDA_VISIBLE_DEVICES
          value: "0,1,2,3"
        - name: NCCL_DEBUG
          value: "INFO"
        - name: NCCL_SOCKET_IFNAME
          value: "eth0"
        - name: WANDB_PROJECT
          value: "ml-pipeline-training"
        - name: WANDB_ENTITY
          value: "ml-team"
        
        resources:
          limits:
            nvidia.com/gpu: 4
            memory: "32Gi"
            cpu: "8"
          requests:
            nvidia.com/gpu: 4
            memory: "16Gi"
            cpu: "4"
        
        volumeMounts:
        - name: datasets
          mountPath: /datasets
          readOnly: true
        - name: models
          mountPath: /models
        - name: logs
          mountPath: /logs
        - name: configs
          mountPath: /app/configs
          readOnly: true
        - name: scripts
          mountPath: /app/scripts
          readOnly: true
        - name: vault-secrets
          mountPath: /secrets
          readOnly: true
        
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "ps aux | grep -v grep | grep deepspeed || exit 1"
          initialDelaySeconds: 300
          periodSeconds: 60
          timeoutSeconds: 30
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "test -f /logs/training/training.log && tail -n 10 /logs/training/training.log | grep -q 'Training'"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
      
      volumes:
      - name: datasets
        persistentVolumeClaim:
          claimName: ml-datasets-pvc
      - name: models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: ml-logs-pvc
      - name: configs
        configMap:
          name: ml-configs
      - name: scripts
        configMap:
          name: ml-scripts
      - name: vault-secrets
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "vault-provider"
      
      nodeSelector:
        nvidia.com/gpu.present: "true"
        accelerator: "nvidia-tesla-v100"
      
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: ml-training
        operator: Equal
        value: "true"
        effect: NoSchedule
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu.present
                operator: In
                values: ["true"]
              - key: node.kubernetes.io/instance-type
                operator: In
                values: ["gpu-node", "ml-node"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values: ["deepspeed-training"]
              topologyKey: kubernetes.io/hostname
---
# ===========================================================
# Service Account for Training Jobs
# ===========================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-training-sa
  namespace: ml-pipeline
  labels:
    app.kubernetes.io/name: ml-training
    app.kubernetes.io/component: service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ml-training-role
  namespace: ml-pipeline
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/exec"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ml-training-rolebinding
  namespace: ml-pipeline
subjects:
- kind: ServiceAccount
  name: ml-training-sa
  namespace: ml-pipeline
roleRef:
  kind: Role
  name: ml-training-role
  apiGroup: rbac.authorization.k8s.io
