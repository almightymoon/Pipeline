apiVersion: apps/v1
kind: Deployment
metadata:
  name: DEPLOYMENT_NAME_PLACEHOLDER
  namespace: NAMESPACE_PLACEHOLDER
  labels:
    app: REPO_NAME_PLACEHOLDER
spec:
  replicas: 1
  selector:
    matchLabels:
      app: REPO_NAME_PLACEHOLDER
  template:
    metadata:
      labels:
        app: REPO_NAME_PLACEHOLDER
    spec:
      containers:
      - name: REPO_NAME_PLACEHOLDER
        image: IMAGE_NAME_PLACEHOLDER
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - |
            # Try to find and run the application
            echo "üîç Looking for application entrypoint..."
            
            # Check common locations for server.js or main application files
            if [ -f "/usr/local/app/server.js" ]; then
              echo "‚úÖ Found server.js in /usr/local/app/"
              cd /usr/local/app && node server.js
            elif [ -f "/usr/local/app/result/server.js" ]; then
              echo "‚úÖ Found server.js in /usr/local/app/result/"
              echo "‚ÑπÔ∏è This is the example-voting-app which requires a database"
              echo "‚ÑπÔ∏è Starting informational web server instead..."
              # Create an informational page about the example-voting-app
              mkdir -p /tmp/web
              cat > /tmp/web/index.html << 'EOF'
              <!DOCTYPE html>
              <html><head><title>Example Voting App - Pipeline Deployment</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; min-height: 100vh; }
                .container { max-width: 800px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); }
                h1 { color: #ffd700; text-align: center; }
                .app-info { background: rgba(0,0,0,0.3); padding: 20px; border-radius: 10px; margin: 20px 0; }
                .status { background: #28a745; padding: 10px; border-radius: 5px; margin: 10px 0; }
                .warning { background: #ffc107; color: #000; padding: 10px; border-radius: 5px; margin: 10px 0; }
                .links { margin: 20px 0; }
                .links a { color: #ffd700; text-decoration: none; margin: 10px; padding: 10px 20px; background: rgba(255,255,255,0.2); border-radius: 5px; display: inline-block; }
                .links a:hover { background: rgba(255,255,255,0.3); }
              </style></head>
              <body>
                <div class="container">
                  <h1>üó≥Ô∏è Example Voting App</h1>
                  <div class="status">‚úÖ Successfully Deployed via Pipeline</div>
                  
                  <div class="app-info">
                    <h3>üìã Application Details</h3>
                    <p><strong>Repository:</strong> example-voting-app</p>
                    <p><strong>Pipeline Run:</strong> #RUN_NUMBER_PLACEHOLDER</p>
                    <p><strong>Status:</strong> Deployed but requires database setup</p>
                  </div>
                  
                  <div class="warning">
                    <h4>‚ö†Ô∏è Application Requirements</h4>
                    <p>This is a multi-service application that requires:</p>
                    <ul>
                      <li>PostgreSQL database</li>
                      <li>Redis cache</li>
                      <li>Multiple microservices (vote, result, worker)</li>
                    </ul>
                    <p>The application files are successfully deployed but need the full stack to be functional.</p>
                  </div>
                  
                  <div class="app-info">
                    <h3>üîç What is the Example Voting App?</h3>
                    <p>The example-voting-app is a microservices-based voting application with:</p>
                    <ul>
                      <li><strong>Vote Service:</strong> Python Flask app for casting votes</li>
                      <li><strong>Result Service:</strong> Node.js app for displaying results</li>
                      <li><strong>Worker Service:</strong> Java app for processing votes</li>
                      <li><strong>Database:</strong> PostgreSQL for storing votes</li>
                      <li><strong>Cache:</strong> Redis for session management</li>
                    </ul>
                  </div>
                  
                  <div class="links">
                    <a href="REPO_URL_PLACEHOLDER" target="_blank">üìÅ View Repository</a>
                    <a href="http://213.109.162.134:30102" target="_blank">üìä Grafana Dashboard</a>
                    <a href="https://github.com/almightymoon/Pipeline/actions" target="_blank">‚öôÔ∏è Pipeline Logs</a>
                  </div>
                  
                  <div class="app-info">
                    <p><strong>Deployment Status:</strong> ‚úÖ Container running | ‚ö†Ô∏è Database required for full functionality</p>
                    <p><strong>Next Steps:</strong> To run the full application, deploy with PostgreSQL and Redis services.</p>
                  </div>
                </div>
              </body></html>
              EOF
              cd /tmp/web && npx -y http-server -p 80
            elif [ -f "/usr/local/app/vote/app.py" ]; then
              echo "‚úÖ Found app.py in /usr/local/app/vote/"
              cd /usr/local/app/vote && python3 app.py
            else
              echo "‚ö†Ô∏è No standard application found, listing directory contents:"
              find /usr/local/app -name "*.js" -o -name "*.py" -o -name "*.jar" | head -10
              echo "üìÅ Directory structure:"
              ls -la /usr/local/app/ || echo "Cannot list /usr/local/app/"
              echo "üîÑ Starting a simple HTTP server as fallback..."
              # Create a simple status page and serve it
              mkdir -p /tmp/web
              echo '<!DOCTYPE html><html><head><title>Pipeline Deployment</title></head><body style="font-family: Arial; text-align: center; padding: 50px;"><h1>üöÄ Pipeline Deployment Active</h1><p>Repository: REPO_NAME_PLACEHOLDER</p><p>Pipeline Run: #RUN_NUMBER_PLACEHOLDER</p><p>Status: Application files found but entrypoint needs adjustment</p><p><a href="REPO_URL_PLACEHOLDER">View Repository</a></p></body></html>' > /tmp/web/index.html
              cd /tmp/web && npx -y http-server -p 80
            fi
        ports:
        - containerPort: 3000
        - containerPort: 8080
        - containerPort: 80
        env:
        - name: REPO_NAME
          value: "REPO_NAME_PLACEHOLDER"
        - name: REPO_URL
          value: "REPO_URL_PLACEHOLDER"
        - name: PIPELINE_RUN
          value: "RUN_NUMBER_PLACEHOLDER"
---
apiVersion: v1
kind: Service
metadata:
  name: SERVICE_NAME_PLACEHOLDER
  namespace: NAMESPACE_PLACEHOLDER
  labels:
    app: REPO_NAME_PLACEHOLDER
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 3000
    nodePort: NODE_PORT_PLACEHOLDER
  selector:
    app: REPO_NAME_PLACEHOLDER
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: INGRESS_NAME_PLACEHOLDER
  namespace: NAMESPACE_PLACEHOLDER
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: HOST_NAME_PLACEHOLDER
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: SERVICE_NAME_PLACEHOLDER
            port:
              number: 80