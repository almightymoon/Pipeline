# ===========================================================
# Grafana Access Configuration
# ===========================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    
    datasources:
      # Prometheus datasource
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
        jsonData:
          httpMethod: POST
          manageAlerts: true
          prometheusType: Prometheus
          prometheusVersion: 2.40.0
          cacheLevel: 'High'
          disableRecordingRules: false
          incrementalQuerying: false
          incrementalQueryOverlapWindow: 10m
        
      # Loki datasource for logs
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        editable: true
        jsonData:
          httpHeaderName1: "X-Scope-OrgID"
          derivedFields:
            - datasourceUid: prometheus
              matcherRegex: "traceID=(\\w+)"
              name: TraceID
              url: "$${__value.raw}"
        
      # Jaeger datasource for tracing
      - name: Jaeger
        type: jaeger
        access: proxy
        url: http://jaeger:16686
        editable: true
        
      # Tempo datasource for tracing
      - name: Tempo
        type: tempo
        access: proxy
        url: http://tempo:3200
        editable: true
        jsonData:
          tracesToLogs:
            datasourceUid: 'loki'
            tags: ['job', 'instance', 'pod', 'namespace']
            mappedTags: [{ key: 'service.name', value: 'service' }]
            mapTagNamesEnabled: false
            spanStartTimeShift: '1h'
            spanEndTimeShift: '1h'
            filterByTraceID: false
            filterBySpanID: false
          tracesToMetrics:
            datasourceUid: 'prometheus'
            tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
            queries:
              - name: 'Sample query'
                query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
          serviceMap:
            datasourceUid: 'prometheus'
          search:
            hide: false
          nodeGraph:
            enabled: true
          lokiSearch:
            datasourceUid: 'loki'
        
      # OpenSearch datasource
      - name: OpenSearch
        type: opensearch
        access: proxy
        url: http://opensearch:9200
        database: "ml-pipeline-logs"
        editable: true
        jsonData:
          index: "ml-pipeline-*"
          timeField: "@timestamp"
          esVersion: "8.0.0"
          logMessageField: "message"
          logLevelField: "level"
          maxConcurrentShardRequests: 5
          includeFrozen: false
          xpack: false
          interval: "Daily"
          timeInterval: "1d"
        
      # InfluxDB datasource (for custom metrics)
      - name: InfluxDB
        type: influxdb
        access: proxy
        url: http://influxdb:8086
        database: ml_pipeline_metrics
        user: admin
        secureJsonData:
          password: ${INFLUXDB_PASSWORD}
        jsonData:
          httpMode: POST
          timeInterval: 10s
          version: InfluxQL
        
      # MySQL datasource (for application data)
      - name: MySQL
        type: mysql
        access: proxy
        url: mysql:3306
        database: ml_pipeline
        user: grafana
        secureJsonData:
          password: ${MYSQL_PASSWORD}
        jsonData:
          maxOpenConns: 100
          maxIdleConns: 100
          maxIdleConnsAuto: true
          connMaxLifetime: 14400
          timezone: UTC
          allowCleartextPasswords: false
        
      # PostgreSQL datasource (for application data)
      - name: PostgreSQL
        type: postgres
        access: proxy
        url: postgres:5432
        database: ml_pipeline
        user: grafana
        secureJsonData:
          password: ${POSTGRES_PASSWORD}
        jsonData:
          sslmode: disable
          postgresVersion: 1200
          timescaledb: false
        
      # CloudWatch datasource (if using AWS)
      - name: CloudWatch
        type: cloudwatch
        access: proxy
        url: https://monitoring.us-east-1.amazonaws.com
        jsonData:
          authType: keys
          defaultRegion: us-east-1
          assumeRoleArn: ${AWS_ROLE_ARN}
        secureJsonData:
          accessKey: ${AWS_ACCESS_KEY}
          secretKey: ${AWS_SECRET_KEY}
        
      # Azure Monitor datasource (if using Azure)
      - name: Azure Monitor
        type: grafana-azure-monitor-datasource
        access: proxy
        url: /api/datasources/proxy/azure
        jsonData:
          cloudName: azuremonitor
          azureAuthType: clientsecret
          tenantId: ${AZURE_TENANT_ID}
          clientId: ${AZURE_CLIENT_ID}
          subscriptionId: ${AZURE_SUBSCRIPTION_ID}
        secureJsonData:
          clientSecret: ${AZURE_CLIENT_SECRET}
        
      # Google Cloud Monitoring (if using GCP)
      - name: Google Cloud Monitoring
        type: stackdriver
        access: proxy
        url: /api/datasources/proxy/google
        jsonData:
          authenticationType: jwt
          defaultProject: ${GCP_PROJECT_ID}
          clientEmail: ${GCP_CLIENT_EMAIL}
        secureJsonData:
          privateKey: ${GCP_PRIVATE_KEY}
---
# ===========================================================
# Grafana Configuration
# ===========================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [server]
    root_url = https://grafana.example.com/
    serve_from_sub_path = false
    
    [database]
    type = postgres
    host = postgres:5432
    name = grafana
    user = grafana
    password = ${POSTGRES_PASSWORD}
    ssl_mode = disable
    
    [security]
    admin_user = admin
    admin_password = ${GRAFANA_ADMIN_PASSWORD}
    secret_key = ${GRAFANA_SECRET_KEY}
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer
    
    [auth.anonymous]
    enabled = false
    
    [auth.google]
    enabled = true
    client_id = ${GOOGLE_CLIENT_ID}
    client_secret = ${GOOGLE_CLIENT_SECRET}
    scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    auth_url = https://accounts.google.com/o/oauth2/auth
    token_url = https://oauth2.googleapis.com/token
    api_url = https://www.googleapis.com/oauth2/v1/userinfo
    allowed_domains = example.com
    allow_sign_up = true
    
    [auth.github]
    enabled = true
    client_id = ${GITHUB_CLIENT_ID}
    client_secret = ${GITHUB_CLIENT_SECRET}
    scopes = user:email
    auth_url = https://github.com/login/oauth/authorize
    token_url = https://github.com/login/oauth/access_token
    api_url = https://api.github.com/user
    allowed_organizations = yourorg
    allow_sign_up = true
    
    [smtp]
    enabled = true
    host = smtp.example.com:587
    user = grafana@example.com
    password = ${SMTP_PASSWORD}
    from_address = grafana@example.com
    from_name = Grafana
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [unified_alerting]
    enabled = true
    
    [log]
    mode = console file
    level = info
    
    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/ml-pipeline-dashboard.json
    
    [plugins]
    allow_loading_unsigned_plugins = grafana-piechart-panel
    
    [feature_toggles]
    enable = ngalert
    
    [external_image_storage]
    provider = s3
    s3_bucket = grafana-images
    s3_region = us-east-1
    s3_access_key = ${AWS_ACCESS_KEY}
    s3_secret_key = ${AWS_SECRET_KEY}
---
# ===========================================================
# Grafana Dashboard ConfigMaps
# ===========================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: dashboards
data:
  ml-pipeline-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "ML Pipeline Monitoring Dashboard",
        "tags": ["ml", "pipeline", "gpu", "training", "inference"],
        "style": "dark",
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Pipeline Status Overview",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(tekton_pipelinerun_duration_seconds{status=\"Succeeded\"})",
                "legendFormat": "Successful Pipelines"
              },
              {
                "expr": "sum(tekton_pipelinerun_duration_seconds{status=\"Failed\"})",
                "legendFormat": "Failed Pipelines"
              },
              {
                "expr": "sum(tekton_pipelinerun_duration_seconds{status=\"Running\"})",
                "legendFormat": "Running Pipelines"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 0
            }
          }
        ]
      }
    }
---
# ===========================================================
# Grafana Secrets
# ===========================================================
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Grafana admin credentials
  GRAFANA_ADMIN_PASSWORD: "admin123"
  GRAFANA_SECRET_KEY: "your-secret-key-here"
  
  # Database credentials
  POSTGRES_PASSWORD: "grafana_password"
  MYSQL_PASSWORD: "grafana_password"
  
  # External service credentials
  INFLUXDB_PASSWORD: "influxdb_password"
  
  # OAuth credentials
  GOOGLE_CLIENT_ID: "your-google-client-id"
  GOOGLE_CLIENT_SECRET: "your-google-client-secret"
  GITHUB_CLIENT_ID: "your-github-client-id"
  GITHUB_CLIENT_SECRET: "your-github-client-secret"
  
  # Cloud provider credentials
  AWS_ACCESS_KEY: "your-aws-access-key"
  AWS_SECRET_KEY: "your-aws-secret-key"
  AWS_ROLE_ARN: "arn:aws:iam::123456789012:role/GrafanaRole"
  AZURE_TENANT_ID: "your-azure-tenant-id"
  AZURE_CLIENT_ID: "your-azure-client-id"
  AZURE_CLIENT_SECRET: "your-azure-client-secret"
  AZURE_SUBSCRIPTION_ID: "your-azure-subscription-id"
  GCP_PROJECT_ID: "your-gcp-project-id"
  GCP_CLIENT_EMAIL: "grafana@your-gcp-project.iam.gserviceaccount.com"
  GCP_PRIVATE_KEY: "your-gcp-private-key"
  
  # SMTP credentials
  SMTP_PASSWORD: "your-smtp-password"
