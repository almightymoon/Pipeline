name: Auto Terminate Deployment

on:
  repository_dispatch:
    types: [terminate_deployment]
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository name'
        required: true
        default: ''
      deployment:
        description: 'Deployment name'
        required: true
        default: ''
      namespace:
        description: 'Kubernetes namespace'
        required: true
        default: 'pipeline-apps'

jobs:
  terminate:
    name: Auto Terminate Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Pipeline Code
      uses: actions/checkout@v4
    
    - name: Extract Parameters from Event
      id: parse_params
      run: |
        # Support both workflow_dispatch and repository_dispatch
        if [ -n "${{ github.event.inputs.repository }}" ]; then
          # workflow_dispatch (manual trigger)
          REPO_NAME="${{ github.event.inputs.repository }}"
          DEPLOYMENT_NAME="${{ github.event.inputs.deployment }}"
          NAMESPACE="${{ github.event.inputs.namespace }}"
        else
          # repository_dispatch (webhook trigger)
          REPO_NAME="${{ github.event.client_payload.repository }}"
          DEPLOYMENT_NAME="${{ github.event.client_payload.deployment }}"
          NAMESPACE="${{ github.event.client_payload.namespace }}"
        fi
        
        echo "repository=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "deployment=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
        echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
        
        echo "========================================="
        echo "Auto Terminating Deployment"
        echo "========================================="
        echo "Repository: $REPO_NAME"
        echo "Deployment: $DEPLOYMENT_NAME"
        echo "Namespace: $NAMESPACE"
        echo "========================================="
    
    - name: Terminate Deployment
      env:
        KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
      run: |
        set -euo pipefail

        # Setup kubeconfig
        echo "$KUBECONFIG_DATA" | base64 -d > /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
        chmod 600 /tmp/kubeconfig

        echo "========================================="
        echo "Terminating Kubernetes Deployment"
        echo "========================================="

        # Get parameters from previous step
        REPO_NAME="${{ steps.parse_params.outputs.repository }}"
        DEPLOYMENT_NAME="${{ steps.parse_params.outputs.deployment }}"
        NAMESPACE="${{ steps.parse_params.outputs.namespace }}"

        # Commonly derived resource names
        SERVICE_NAME="${REPO_NAME}-service"
        INGRESS_NAME="${REPO_NAME}-ingress"

        # Verify connection
        kubectl get nodes

        echo "Requested: repo=$REPO_NAME deploy=$DEPLOYMENT_NAME ns=$NAMESPACE"

        # Helper: find namespace if not found in provided one
        resolve_namespace() {
          local name="$1"
          # Search all namespaces for a deployment with this name
          FOUND_NS=$(kubectl get deploy -A -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{"\n"}{end}' | awk -v n="$name" '$2==n{print $1; exit}') || true
          echo "$FOUND_NS"
        }

        # If deployment not found in provided namespace, try to locate it elsewhere
        if ! kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Deployment not found in ns=$NAMESPACE. Attempting discovery..."
          ALT_NS=$(resolve_namespace "$DEPLOYMENT_NAME")
          if [ -n "$ALT_NS" ]; then
            echo "üîé Found deployment in namespace: $ALT_NS"
            NAMESPACE="$ALT_NS"
          else
            echo "‚ö†Ô∏è Deployment $DEPLOYMENT_NAME not found in any namespace by exact name. Trying label selector app=$REPO_NAME"
            ALT_NS=$(kubectl get deploy -A -l app="$REPO_NAME" -o jsonpath='{range .items[*]}{.metadata.namespace}{"\n"}{end}' | head -1 || true)
            if [ -n "$ALT_NS" ]; then
              echo "üîé Found deployment via label in namespace: $ALT_NS"
              NAMESPACE="$ALT_NS"
              # derive actual deployment name from label
              DEPLOYMENT_NAME=$(kubectl get deploy -n "$NAMESPACE" -l app="$REPO_NAME" -o jsonpath='{.items[0].metadata.name}')
            else
              echo "‚ùå Could not locate deployment to terminate. Exiting gracefully."
              exit 0
            fi
          fi
        fi

        echo "‚û°Ô∏è Terminating deployment: $DEPLOYMENT_NAME in namespace: $NAMESPACE"

        # First scale to zero to stop traffic fast
        kubectl scale deploy "$DEPLOYMENT_NAME" -n "$NAMESPACE" --replicas=0 --timeout=60s || true

        # Delete deployment (ignore if already gone)
        kubectl delete deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" --wait=true --timeout=90s || true

        # Best-effort delete Service and Ingress by name and by label
        kubectl delete service "$SERVICE_NAME" -n "$NAMESPACE" --ignore-not-found=true || true
        kubectl delete ingress "$INGRESS_NAME" -n "$NAMESPACE" --ignore-not-found=true || true

        # Also delete any service/ingress matching app label to ensure cleanup
        kubectl delete svc -n "$NAMESPACE" -l app="$REPO_NAME" --ignore-not-found=true || true
        kubectl delete ingress -n "$NAMESPACE" -l app="$REPO_NAME" --ignore-not-found=true || true

        # Confirm no pods remain for this app
        REMAINING_PODS=$(kubectl get pods -n "$NAMESPACE" -l app="$REPO_NAME" -o name | wc -l | tr -d ' ')
        echo "Remaining pods with app=$REPO_NAME: $REMAINING_PODS"
        if [ "$REMAINING_PODS" -gt 0 ]; then
          echo "‚ö†Ô∏è Force deleting remaining pods"
          kubectl delete pods -n "$NAMESPACE" -l app="$REPO_NAME" --force --grace-period=0 || true
        fi

        echo "========================================="
        echo "‚úÖ TERMINATION COMPLETED"
        echo "========================================="
        echo "Repository: $REPO_NAME"
        echo "Namespace: $NAMESPACE"
        echo "Deployment: $DEPLOYMENT_NAME - TERMINATED (or not present)"
        echo "Service/Ingress: Removed if present"
        echo "Terminated by: ${{ github.actor }}"
        echo "Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "========================================="
    
    - name: Update Jira Status
      run: |
        echo "========================================="
        echo "Termination Status Update"
        echo "========================================="
        echo "Repository: ${{ steps.parse_params.outputs.repository }}"
        echo "Deployment: ${{ steps.parse_params.outputs.deployment }}"
        echo "Status: ‚úÖ TERMINATED"
        echo "========================================="

