name: Scan External Repositories

on:
  push:
    paths:
      - 'repos-to-scan.yaml'
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight

jobs:
  read-repos:
    name: Read Repository List
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.parse.outputs.repos }}
    
    steps:
    - name: Checkout Pipeline Code
      uses: actions/checkout@v4
    
    - name: Parse Repository List
      id: parse
      run: |
        if [ ! -f "repos-to-scan.yaml" ]; then
          echo "No repos-to-scan.yaml found"
          echo "repos=[]" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Install yq for YAML parsing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Convert YAML to JSON array
        REPOS=$(yq eval '.repositories' repos-to-scan.yaml -o=json)
        
        if [ "$REPOS" = "null" ] || [ -z "$REPOS" ] || [ "$REPOS" = "[]" ]; then
          echo "No repositories configured in repos-to-scan.yaml"
          echo "repos=[]" >> $GITHUB_OUTPUT
        else
          echo "Found repositories to scan"
          echo "repos=$REPOS" >> $GITHUB_OUTPUT
        fi

  scan-repository:
    name: Scan ${{ matrix.repo.name }}
    runs-on: ubuntu-latest
    needs: read-repos
    if: needs.read-repos.outputs.repos != '[]'
    strategy:
      matrix:
        repo: ${{ fromJson(needs.read-repos.outputs.repos) }}
      fail-fast: false
      max-parallel: 3
    
    steps:
    - name: Parse Repository URL
      id: parse_url
      run: |
        URL="${{ matrix.repo.url }}"
        # Remove .git suffix if present
        URL="${URL%.git}"
        # Extract owner/repo from URL
        REPO_PATH=$(echo "$URL" | sed 's|https://github.com/||' | sed 's|git@github.com:||' | sed 's|\.git$||')
        echo "repo_path=$REPO_PATH" >> $GITHUB_OUTPUT
        echo "Parsed repository: $REPO_PATH"
    
    - name: Checkout Target Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.parse_url.outputs.repo_path }}
        ref: ${{ matrix.repo.branch || 'main' }}
        path: target-repo
    
    - name: Repository Information
      run: |
        echo "========================================="
        echo "Scanning Repository: ${{ matrix.repo.name }}"
        echo "URL: ${{ matrix.repo.url }}"
        echo "Branch: ${{ matrix.repo.branch || 'main' }}"
        echo "Scan Type: ${{ matrix.repo.scan_type || 'full' }}"
        echo "========================================="
        cd target-repo
        echo "Repository size: $(du -sh . | cut -f1)"
        echo "Files: $(find . -type f | wc -l)"
        echo "Lines of code: $(find . -name '*.py' -o -name '*.js' -o -name '*.java' -o -name '*.go' | xargs wc -l 2>/dev/null | tail -1 || echo '0')"
    
    - name: Security Scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './target-repo'
        format: 'table'
        exit-code: '0'
        severity: 'HIGH,CRITICAL'
    
    - name: Check for Secrets
      run: |
        cd target-repo
        echo "Scanning for exposed secrets..."
        
        # Check for common secret patterns
        echo "Checking for API keys..."
        grep -r -i "api[_-]key\|apikey" --include="*.env*" --include="*.config*" --include="*.json" . || echo "No API keys found in config files"
        
        echo "Checking for passwords..."
        grep -r -i "password\s*=\|pwd\s*=" --include="*.env*" --include="*.config*" . || echo "No hardcoded passwords found"
        
        echo "Secret scan completed"
    
    - name: Dependency Analysis
      if: matrix.repo.scan_type == 'full' || matrix.repo.scan_type == null
      run: |
        cd target-repo
        echo "Analyzing dependencies..."
        
        # Python
        if [ -f "requirements.txt" ]; then
          echo "Found Python requirements.txt"
          pip install --dry-run -r requirements.txt 2>&1 | grep -i "error\|warning" || echo "Python dependencies look good"
        fi
        
        # Node.js
        if [ -f "package.json" ]; then
          echo "Found Node.js package.json"
          npm install --dry-run 2>&1 | grep -i "error\|warning" || echo "Node dependencies look good"
        fi
        
        # Go
        if [ -f "go.mod" ]; then
          echo "Found Go modules"
          go mod verify 2>&1 || echo "Go modules verified"
        fi
    
    - name: Code Quality Check
      if: matrix.repo.scan_type == 'full' || matrix.repo.scan_type == null
      run: |
        cd target-repo
        echo "Running basic code quality checks..."
        
        # Check for TODO/FIXME comments
        echo "Checking for TODO/FIXME comments:"
        grep -r -n "TODO\|FIXME" --include="*.py" --include="*.js" --include="*.java" --include="*.go" . | head -20 || echo "No TODO/FIXME found"
        
        # Check file sizes
        echo "Checking for large files (>1MB):"
        find . -type f -size +1M -not -path "*/\.*" | head -10 || echo "No large files found"
    
    - name: Build Test (if applicable)
      if: matrix.repo.scan_type == 'full' || matrix.repo.scan_type == null
      run: |
        cd target-repo
        echo "Attempting to detect and run build..."
        
        # Docker
        if [ -f "Dockerfile" ]; then
          echo "Found Dockerfile - testing build"
          docker build --no-cache -t test-build:latest . || echo "Docker build failed (non-blocking)"
        fi
        
        # Python
        if [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
          echo "Found Python package - testing installation"
          pip install -e . || echo "Python package install failed (non-blocking)"
        fi
    
    - name: Generate Scan Report
      run: |
        echo "========================================="
        echo "SCAN REPORT: ${{ matrix.repo.name }}"
        echo "========================================="
        echo "Repository: ${{ matrix.repo.url }}"
        echo "Branch: ${{ matrix.repo.branch || 'main' }}"
        echo "Scan Type: ${{ matrix.repo.scan_type || 'full' }}"
        echo "Scan Time: $(date)"
        echo "Status: COMPLETED"
        echo "========================================="
    
    - name: Create Jira Issue (Optional)
      if: always() && secrets.JIRA_API_TOKEN != ''
      run: |
        # Create Jira issue with scan results
        pip install requests
        
        cat > create_scan_issue.py << 'EOF'
        import os
        import requests
        import json
        
        jira_url = os.environ.get('JIRA_URL', '').strip()
        jira_email = os.environ.get('JIRA_EMAIL', '').strip()
        jira_api_token = os.environ.get('JIRA_API_TOKEN', '').strip()
        jira_project_key = os.environ.get('JIRA_PROJECT_KEY', '').strip()
        
        if not all([jira_url, jira_email, jira_api_token, jira_project_key]):
            print("Jira not configured, skipping")
            exit(0)
        
        if not jira_url.startswith(('http://', 'https://')):
            jira_url = 'https://' + jira_url
        
        if not jira_url.endswith('/rest/api/2/issue'):
            if jira_url.endswith('/'):
                jira_url = jira_url + 'rest/api/2/issue'
            else:
                jira_url = jira_url + '/rest/api/2/issue'
        
        repo_name = "${{ matrix.repo.name }}"
        repo_url = "${{ matrix.repo.url }}"
        
        payload = {
            "fields": {
                "project": {"key": jira_project_key},
                "summary": f"Repository Scan: {repo_name}",
                "description": f"Automated security and quality scan completed for {repo_name}\\n\\nRepository: {repo_url}\\nBranch: ${{ matrix.repo.branch || 'main' }}\\nScan Type: ${{ matrix.repo.scan_type || 'full' }}\\n\\nView full results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "issuetype": {"name": "Task"}
            }
        }
        
        try:
            response = requests.post(
                jira_url,
                auth=(jira_email, jira_api_token),
                headers={'Content-Type': 'application/json'},
                json=payload,
                timeout=30
            )
            if response.status_code in [200, 201]:
                print(f"Created Jira issue: {response.json().get('key')}")
            else:
                print(f"Failed to create Jira issue: {response.status_code}")
        except Exception as e:
            print(f"Error: {e}")
        EOF
        
        python create_scan_issue.py
      env:
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}

  summary:
    name: Scan Summary
    runs-on: ubuntu-latest
    needs: [read-repos, scan-repository]
    if: always()
    
    steps:
    - name: Summary Report
      run: |
        echo "========================================="
        echo "        REPOSITORY SCAN SUMMARY"
        echo "========================================="
        echo ""
        echo "Scan completed for all configured repositories"
        echo "Check individual job logs for detailed results"
        echo ""
        echo "View results at:"
        echo "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "========================================="

