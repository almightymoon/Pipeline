name: Scan External Repositories

on:
  push:
    paths:
      - 'repos-to-scan.yaml'
    branches:
      - main
  workflow_dispatch:

jobs:
  scan-repository:
    name: Scan External Repository
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Pipeline Code
      uses: actions/checkout@v4
      with:
        path: pipeline
    
    - name: Read Repository Configuration
      id: read_config
      run: |
        cd pipeline
        
        if [ ! -f "repos-to-scan.yaml" ]; then
          echo "No repos-to-scan.yaml found"
          echo "has_repos=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Install yq for YAML parsing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Get first repository (for now, we'll process one at a time)
        REPO_URL=$(yq eval '.repositories[0].url' repos-to-scan.yaml)
        REPO_NAME=$(yq eval '.repositories[0].name' repos-to-scan.yaml)
        REPO_BRANCH=$(yq eval '.repositories[0].branch' repos-to-scan.yaml)
        SCAN_TYPE=$(yq eval '.repositories[0].scan_type' repos-to-scan.yaml)
        
        if [ "$REPO_URL" = "null" ] || [ -z "$REPO_URL" ]; then
          echo "No repositories configured"
          echo "has_repos=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Clean up URL - remove .git suffix
        REPO_URL=$(echo "$REPO_URL" | sed 's/\.git$//')
        
        # Extract owner/repo from URL
        REPO_PATH=$(echo "$REPO_URL" | sed 's|https://github.com/||' | sed 's|git@github.com:||')
        
        echo "has_repos=true" >> $GITHUB_OUTPUT
        echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
        echo "repo_path=$REPO_PATH" >> $GITHUB_OUTPUT
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "repo_branch=$REPO_BRANCH" >> $GITHUB_OUTPUT
        echo "scan_type=$SCAN_TYPE" >> $GITHUB_OUTPUT
        
        echo "========================================="
        echo "Repository Configuration:"
        echo "  Name: $REPO_NAME"
        echo "  URL: $REPO_URL"
        echo "  Path: $REPO_PATH"
        echo "  Branch: $REPO_BRANCH"
        echo "  Scan Type: $SCAN_TYPE"
        echo "========================================="
    
    - name: Checkout External Repository
      if: steps.read_config.outputs.has_repos == 'true'
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.read_config.outputs.repo_path }}
        ref: ${{ steps.read_config.outputs.repo_branch }}
        path: external-repo
    
    - name: Repository Information
      if: steps.read_config.outputs.has_repos == 'true'
      run: |
        echo "========================================="
        echo "Scanning Repository: ${{ steps.read_config.outputs.repo_name }}"
        echo "URL: ${{ steps.read_config.outputs.repo_url }}"
        echo "Branch: ${{ steps.read_config.outputs.repo_branch }}"
        echo "========================================="
        cd external-repo
        echo "Repository size: $(du -sh . | cut -f1)"
        echo "Files: $(find . -type f -not -path '*/\.git/*' | wc -l)"
        echo "Lines of code:"
        find . -name '*.py' -o -name '*.js' -o -name '*.java' -o -name '*.go' | xargs wc -l 2>/dev/null | tail -1 || echo "0 total"
    
    - name: Security Scan with Trivy
      if: steps.read_config.outputs.has_repos == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './external-repo'
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'
        severity: 'HIGH,CRITICAL'
    
    - name: Check for Secrets and API Keys
      if: steps.read_config.outputs.has_repos == 'true'
      run: |
        cd external-repo
        echo "========================================="
        echo "Scanning for Exposed Secrets..."
        echo "========================================="
        
        # Check for common secret patterns
        echo ""
        echo "Checking for API keys in config files..."
        grep -r -i "api[_-]key\|apikey" --include="*.env*" --include="*.config*" --include="*.json" --include="*.yaml" --include="*.yml" . 2>/dev/null | head -20 || echo "  No API keys found"
        
        echo ""
        echo "Checking for hardcoded passwords..."
        grep -r -i "password\s*=\|pwd\s*=" --include="*.env*" --include="*.config*" --include="*.py" --include="*.js" . 2>/dev/null | head -20 || echo "  No hardcoded passwords found"
        
        echo ""
        echo "Checking for tokens..."
        grep -r -i "token\s*=\|access_token\|secret_key" --include="*.env*" --include="*.config*" . 2>/dev/null | head -20 || echo "  No tokens found"
        
        echo ""
        echo "========================================="
        echo "Secret scan completed"
        echo "========================================="
        
        # Save secret scan results for Jira integration
        if [ -f "secrets-found.txt" ]; then
          cp secrets-found.txt /tmp/secrets-found.txt
        else
          echo "No secrets found" > /tmp/secrets-found.txt
        fi
    
    - name: Dependency Analysis
      if: steps.read_config.outputs.has_repos == 'true'
      run: |
        cd external-repo
        echo "========================================="
        echo "Analyzing Dependencies..."
        echo "========================================="
        
        # Python
        if [ -f "requirements.txt" ]; then
          echo ""
          echo "Python requirements.txt found:"
          cat requirements.txt | head -30
          echo ""
          echo "Checking for known vulnerable packages..."
          pip install safety 2>/dev/null || true
          safety check --file requirements.txt --bare 2>/dev/null || echo "Safety check completed"
        fi
        
        # Node.js
        if [ -f "package.json" ]; then
          echo ""
          echo "Node.js package.json found:"
          cat package.json | head -50
        fi
        
        # Go
        if [ -f "go.mod" ]; then
          echo ""
          echo "Go modules found:"
          cat go.mod | head -30
        fi
        
        echo ""
        echo "========================================="
        echo "Dependency analysis completed"
        echo "========================================="
    
    - name: Code Quality Checks
      if: steps.read_config.outputs.has_repos == 'true'
      run: |
        cd external-repo
        echo "========================================="
        echo "Code Quality Analysis..."
        echo "========================================="
        
        # Check for TODO/FIXME comments
        echo ""
        echo "TODO/FIXME comments found:"
        grep -r -n "TODO\|FIXME" --include="*.py" --include="*.js" --include="*.java" --include="*.go" . 2>/dev/null | head -20 || echo "  None found"
        
        # Check file sizes
        echo ""
        echo "Large files (>1MB):"
        find . -type f -size +1M -not -path "*/\.*" 2>/dev/null | head -10 || echo "  No large files found"
        
        # Check for common bad practices
        echo ""
        echo "Checking for debug code..."
        grep -r -n "console\.log\|print(\|var_dump\|dd(" --include="*.py" --include="*.js" --include="*.php" . 2>/dev/null | head -10 || echo "  No debug statements found"
        
        echo ""
        echo "========================================="
        echo "Quality checks completed"
        echo "========================================="
    
    - name: Collect Scan Metrics
      if: steps.read_config.outputs.has_repos == 'true'
      run: |
        echo "========================================="
        echo "Collecting scan metrics..."
        echo "========================================="
        
        # Count files and lines
        cd external-repo
        TOTAL_FILES=$(find . -type f -not -path '*/\.git/*' | wc -l)
        TOTAL_LINES=$(find . -name '*.py' -o -name '*.js' -o -name '*.java' -o -name '*.go' -o -name '*.ts' -o -name '*.tsx' | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        REPO_SIZE=$(du -sh . | cut -f1)
        
        # Check for common file types
        PYTHON_FILES=$(find . -name '*.py' | wc -l)
        JAVASCRIPT_FILES=$(find . -name '*.js' -o -name '*.ts' -o -name '*.tsx' | wc -l)
        JAVA_FILES=$(find . -name '*.java' | wc -l)
        
        # Estimate vulnerabilities (simplified)
        VULNERABILITIES=0
        if [ -f "requirements.txt" ]; then
          VULNERABILITIES=$((VULNERABILITIES + $(grep -c "==\|>=" requirements.txt 2>/dev/null || echo "0")))
        fi
        if [ -f "package.json" ]; then
          VULNERABILITIES=$((VULNERABILITIES + 1))
        fi
        
        # Save metrics
        echo "pipeline_external_repo_scan{repo_name=\"${{ steps.read_config.outputs.repo_name }}\",repo_url=\"${{ steps.read_config.outputs.repo_url }}\",scan_type=\"${{ steps.read_config.outputs.scan_type }}\"} 1" >> metrics.txt
        echo "pipeline_repo_files_total{repo_name=\"${{ steps.read_config.outputs.repo_name }}\"} $TOTAL_FILES" >> metrics.txt
        echo "pipeline_repo_lines_total{repo_name=\"${{ steps.read_config.outputs.repo_name }}\"} $TOTAL_LINES" >> metrics.txt
        echo "pipeline_repo_python_files{repo_name=\"${{ steps.read_config.outputs.repo_name }}\"} $PYTHON_FILES" >> metrics.txt
        echo "pipeline_repo_javascript_files{repo_name=\"${{ steps.read_config.outputs.repo_name }}\"} $JAVASCRIPT_FILES" >> metrics.txt
        echo "pipeline_repo_java_files{repo_name=\"${{ steps.read_config.outputs.repo_name }}\"} $JAVA_FILES" >> metrics.txt
        echo "pipeline_repo_vulnerabilities{repo_name=\"${{ steps.read_config.outputs.repo_name }}\"} $VULNERABILITIES" >> metrics.txt
        
        echo "Metrics collected:"
        echo "  Total Files: $TOTAL_FILES"
        echo "  Total Lines: $TOTAL_LINES"
        echo "  Repository Size: $REPO_SIZE"
        echo "  Python Files: $PYTHON_FILES"
        echo "  JavaScript Files: $JAVASCRIPT_FILES"
        echo "  Java Files: $JAVA_FILES"
        echo "  Estimated Vulnerabilities: $VULNERABILITIES"
        echo ""
        echo "Metrics saved to metrics.txt"
        echo "========================================="

    - name: Generate Final Report
      if: steps.read_config.outputs.has_repos == 'true'
      run: |
        echo ""
        echo "╔═══════════════════════════════════════════════════╗"
        echo "║                                                   ║"
        echo "║          EXTERNAL REPOSITORY SCAN REPORT          ║"
        echo "║                                                   ║"
        echo "╚═══════════════════════════════════════════════════╝"
        echo ""
        echo "Repository: ${{ steps.read_config.outputs.repo_name }}"
        echo "URL: ${{ steps.read_config.outputs.repo_url }}"
        echo "Branch: ${{ steps.read_config.outputs.repo_branch }}"
        echo "Scan Type: ${{ steps.read_config.outputs.scan_type }}"
        echo "Scan Time: $(date)"
        echo ""
        echo "Status: ✅ SCAN COMPLETED"
        echo ""
        echo "📊 METRICS COLLECTED:"
        if [ -f "metrics.txt" ]; then
          cat metrics.txt
        fi
        echo ""
        echo "🔗 LINKS:"
        echo "  • Repository: ${{ steps.read_config.outputs.repo_url }}"
        echo "  • Grafana Dashboard: http://213.109.162.134:30102/d/ml-all-results/ml-pipeline-all-results"
        echo "  • GitHub Actions: https://github.com/almightymoon/Pipeline/actions/runs/${{ github.run_id }}"
        echo ""
        echo "Review the logs above for detailed findings:"
        echo "  - Security vulnerabilities (Trivy scan)"
        echo "  - Exposed secrets and API keys"
        echo "  - Dependency analysis"
        echo "  - Code quality issues"
        echo ""
        echo "========================================="
    
    - name: Prepare Scan Results for Jira
      if: steps.read_config.outputs.has_repos == 'true'
      run: |
        # Copy Trivy results if available
        if [ -f "trivy-results.json" ]; then
          cp trivy-results.json /tmp/trivy-results.json
          echo "Trivy results copied for Jira integration"
        fi
        
        # Create summary of scan results
        echo "Scan Summary:" > /tmp/scan-summary.txt
        echo "- Repository: ${{ steps.read_config.outputs.repo_name }}" >> /tmp/scan-summary.txt
        echo "- Scan Type: ${{ steps.read_config.outputs.scan_type }}" >> /tmp/scan-summary.txt
        echo "- Scan Date: $(date)" >> /tmp/scan-summary.txt
        echo "- Status: Completed" >> /tmp/scan-summary.txt

    - name: Create Jira Issue
      if: steps.read_config.outputs.has_repos == 'true' && secrets.JIRA_API_TOKEN != ''
      run: |
        pip install requests
        cd pipeline
        python scripts/create_jira_issue.py
      env:
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        JIRA_SUMMARY: "External Repo Scan: ${{ steps.read_config.outputs.repo_name }}"
        JIRA_DESCRIPTION: "Security scan completed for external repository: ${{ steps.read_config.outputs.repo_url }}\n\nBranch: ${{ steps.read_config.outputs.repo_branch }}\nScan Type: ${{ steps.read_config.outputs.scan_type }}\n\nView full results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        REPO_URL: ${{ steps.read_config.outputs.repo_url }}
        REPO_NAME: ${{ steps.read_config.outputs.repo_name }}
        REPO_BRANCH: ${{ steps.read_config.outputs.repo_branch }}
        SCAN_TYPE: ${{ steps.read_config.outputs.scan_type }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
