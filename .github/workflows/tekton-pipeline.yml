name: Enterprise ML Pipeline - Tekton Trigger

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'repos-to-scan.yaml'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image-tag:
        description: 'Image tag'
        required: false
        default: 'latest'

env:
  TEKTON_NAMESPACE: ml-pipeline
  IMAGE_REGISTRY: harbor.yourcompany.com
  IMAGE_NAME: almightymoon/pipeline

jobs:
  # ==========================================
  # TRIGGER TEKTON PIPELINE
  # ==========================================
  trigger-tekton-pipeline:
    name: Trigger Tekton Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'
    
    - name: Configure Kubernetes Access
      run: |
        echo "Configuring Kubernetes access..."
        if [ -n "${{ secrets.KUBECONFIG }}" ]; then
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/kubeconfig
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV
          echo "‚úÖ Kubernetes access configured"
        else
          echo "‚ùå KUBECONFIG secret not set"
          exit 1
        fi
    
    - name: Verify Tekton Installation
      run: |
        echo "üîç Verifying Tekton installation..."
        
        # Check if Tekton is installed
        kubectl get crd pipelines.tekton.dev > /dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "‚úÖ Tekton Pipelines CRD found"
        else
          echo "‚ùå Tekton Pipelines not installed"
          exit 1
        fi
        
        # Check if Tekton is running
        kubectl get pods -n tekton-pipelines | grep -q "Running"
        if [ $? -eq 0 ]; then
          echo "‚úÖ Tekton Pipelines running"
        else
          echo "‚ùå Tekton Pipelines not running"
          exit 1
        fi
        
        # Check if namespace exists
        kubectl get namespace ${{ env.TEKTON_NAMESPACE }} > /dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "‚úÖ Namespace ${{ env.TEKTON_NAMESPACE }} exists"
        else
          echo "Creating namespace ${{ env.TEKTON_NAMESPACE }}..."
          kubectl create namespace ${{ env.TEKTON_NAMESPACE }}
        fi
    
    - name: Deploy Tekton Resources
      run: |
        echo "üì¶ Deploying Tekton resources..."
        
        # Apply Tekton Tasks
        kubectl apply -f tekton/tasks/ -n ${{ env.TEKTON_NAMESPACE }}
        
        # Apply Tekton Pipeline
        kubectl apply -f tekton/pipeline.yaml -n ${{ env.TEKTON_NAMESPACE }}
        
        echo "‚úÖ Tekton resources deployed"
    
    - name: Create PipelineRun
      run: |
        echo "üöÄ Creating Tekton PipelineRun..."
        
        # Generate unique run ID
        RUN_ID="run-$(date +%s)-$(echo ${{ github.sha }} | cut -c1-8)"
        IMAGE_TAG="${{ github.event.inputs.image-tag || github.sha }}"
        
        # Create PipelineRun YAML
        cat > pipeline-run-${RUN_ID}.yaml << EOF
        apiVersion: tekton.dev/v1beta1
        kind: PipelineRun
        metadata:
          name: ml-pipeline-${RUN_ID}
          namespace: ${{ env.TEKTON_NAMESPACE }}
          labels:
            app.kubernetes.io/name: ml-pipeline
            app.kubernetes.io/component: pipeline-run
            app.kubernetes.io/part-of: enterprise-ml
            github.repository: ${{ github.event.repository.name }}
            github.sha: ${{ github.sha }}
            github.ref-name: ${{ github.ref_name }}
            github.actor: ${{ github.actor }}
        spec:
          pipelineRef:
            name: ml-pipeline-enterprise
          params:
            - name: git-url
              value: "${{ github.server_url }}/${{ github.repository }}.git"
            - name: git-revision
              value: "${{ github.sha }}"
            - name: image-registry
              value: "${{ env.IMAGE_REGISTRY }}"
            - name: image-name
              value: "${{ env.IMAGE_NAME }}"
            - name: image-tag
              value: "${IMAGE_TAG}"
            - name: environment
              value: "${{ github.event.inputs.environment || 'staging' }}"
            - name: sonarqube-url
              value: "${{ secrets.SONARQUBE_URL || 'http://sonarqube:9000' }}"
            - name: harbor-url
              value: "${{ secrets.HARBOR_URL || 'harbor.yourcompany.com' }}"
            - name: nexus-url
              value: "${{ secrets.NEXUS_URL || 'http://nexus:8081' }}"
            - name: reportportal-url
              value: "${{ secrets.REPORTPORTAL_URL || 'http://reportportal:8080' }}"
            - name: opensearch-url
              value: "${{ secrets.OPENSEARCH_URL || 'http://opensearch:9200' }}"
            - name: keycloak-url
              value: "${{ secrets.KEYCLOAK_URL || 'http://keycloak:8080' }}"
            - name: argocd-url
              value: "${{ secrets.ARGOCD_URL || 'http://argocd-server:8080' }}"
            - name: defectdojo-url
              value: "${{ secrets.DEFECTDOJO_URL || 'http://defectdojo:8080' }}"
            - name: dependency-track-url
              value: "${{ secrets.DEPENDENCY_TRACK_URL || 'http://dependency-track:8080' }}"
            - name: vault-url
              value: "${{ secrets.VAULT_URL || 'http://vault:8200' }}"
            - name: prometheus-url
              value: "${{ secrets.PROMETHEUS_URL || 'http://prometheus:9090' }}"
            - name: jira-url
              value: "${{ secrets.JIRA_URL }}"
            - name: jira-project-key
              value: "${{ secrets.JIRA_PROJECT_KEY }}"
          workspaces:
            - name: source
              persistentVolumeClaim:
                claimName: pipeline-source-pvc
            - name: docker-config
              secret:
                secretName: docker-config-secret
            - name: sonar-token
              secret:
                secretName: sonar-token-secret
            - name: defectdojo-token
              secret:
                secretName: defectdojo-token-secret
            - name: dependency-track-token
              secret:
                secretName: dependency-track-token-secret
            - name: vault-token
              secret:
                secretName: vault-token-secret
            - name: jira-token
              secret:
                secretName: jira-token-secret
            - name: attestations
              persistentVolumeClaim:
                claimName: pipeline-attestations-pvc
        EOF
        
        # Apply PipelineRun
        kubectl apply -f pipeline-run-${RUN_ID}.yaml
        
        echo "‚úÖ PipelineRun created: ml-pipeline-${RUN_ID}"
        echo "PIPELINE_RUN_NAME=ml-pipeline-${RUN_ID}" >> $GITHUB_ENV
    
    - name: Wait for Pipeline Completion
      run: |
        echo "‚è≥ Waiting for pipeline completion..."
        
        PIPELINE_RUN_NAME="${{ env.PIPELINE_RUN_NAME }}"
        TIMEOUT=1800  # 30 minutes
        INTERVAL=30   # 30 seconds
        
        for ((i=0; i<TIMEOUT; i+=INTERVAL)); do
          STATUS=$(kubectl get pipelinerun $PIPELINE_RUN_NAME -n ${{ env.TEKTON_NAMESPACE }} -o jsonpath='{.status.conditions[0].status}' 2>/dev/null || echo "Unknown")
          
          if [ "$STATUS" = "True" ]; then
            echo "‚úÖ Pipeline completed successfully"
            kubectl get pipelinerun $PIPELINE_RUN_NAME -n ${{ env.TEKTON_NAMESPACE }}
            break
          elif [ "$STATUS" = "False" ]; then
            echo "‚ùå Pipeline failed"
            kubectl get pipelinerun $PIPELINE_RUN_NAME -n ${{ env.TEKTON_NAMESPACE }}
            kubectl describe pipelinerun $PIPELINE_RUN_NAME -n ${{ env.TEKTON_NAMESPACE }}
            exit 1
          else
            echo "‚è≥ Pipeline status: $STATUS (waiting...)"
            sleep $INTERVAL
          fi
        done
        
        if [ $i -ge $TIMEOUT ]; then
          echo "‚ùå Pipeline timed out"
          kubectl get pipelinerun $PIPELINE_RUN_NAME -n ${{ env.TEKTON_NAMESPACE }}
          exit 1
        fi
    
    - name: Collect Pipeline Results
      run: |
        echo "üìä Collecting pipeline results..."
        
        PIPELINE_RUN_NAME="${{ env.PIPELINE_RUN_NAME }}"
        
        # Get pipeline run details
        kubectl get pipelinerun $PIPELINE_RUN_NAME -n ${{ env.TEKTON_NAMESPACE }} -o yaml > pipeline-results.yaml
        
        # Get task run details
        kubectl get taskruns -n ${{ env.TEKTON_NAMESPACE }} -l tekton.dev/pipelineRun=$PIPELINE_RUN_NAME -o yaml > task-results.yaml
        
        # Get logs from all tasks
        mkdir -p pipeline-logs
        for taskrun in $(kubectl get taskruns -n ${{ env.TEKTON_NAMESPACE }} -l tekton.dev/pipelineRun=$PIPELINE_RUN_NAME -o jsonpath='{.items[*].metadata.name}'); do
          echo "üìù Collecting logs from $taskrun..."
          kubectl logs -n ${{ env.TEKTON_NAMESPACE }} -l tekton.dev/taskRun=$taskrun --all-containers=true > pipeline-logs/${taskrun}.log || true
        done
        
        echo "‚úÖ Pipeline results collected"
    
    - name: Upload Pipeline Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: tekton-pipeline-results-${{ github.sha }}
        path: |
          pipeline-results.yaml
          task-results.yaml
          pipeline-logs/
        retention-days: 30
    
    - name: Create Jira Issue
      run: |
        echo "üé´ Creating Jira issue for pipeline run..."
        
        PIPELINE_RUN_NAME="${{ env.PIPELINE_RUN_NAME }}"
        
        # Get pipeline status
        STATUS=$(kubectl get pipelinerun $PIPELINE_RUN_NAME -n ${{ env.TEKTON_NAMESPACE }} -o jsonpath='{.status.conditions[0].status}' 2>/dev/null || echo "Unknown")
        
        if [ "$STATUS" = "True" ]; then
          ISSUE_TYPE="Task"
          SUMMARY="‚úÖ Pipeline Run Completed: $PIPELINE_RUN_NAME"
          DESCRIPTION="Pipeline run completed successfully with Tekton orchestration."
        else
          ISSUE_TYPE="Bug"
          SUMMARY="‚ùå Pipeline Run Failed: $PIPELINE_RUN_NAME"
          DESCRIPTION="Pipeline run failed. Check logs for details."
        fi
        
        # Create Jira issue
        python3 << EOF
        import requests
        import json
        import os
        
        JIRA_URL = "${{ secrets.JIRA_URL }}"
        JIRA_EMAIL = "${{ secrets.JIRA_EMAIL }}"
        JIRA_TOKEN = "${{ secrets.JIRA_API_TOKEN }}"
        PROJECT_KEY = "${{ secrets.JIRA_PROJECT_KEY }}"
        
        headers = {
            'Authorization': f'Basic {JIRA_EMAIL}:{JIRA_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        issue_data = {
            'fields': {
                'project': {'key': PROJECT_KEY},
                'summary': '$SUMMARY',
                'description': '$DESCRIPTION',
                'issuetype': {'name': '$ISSUE_TYPE'},
                'labels': ['tekton', 'pipeline', 'automated']
            }
        }
        
        try:
            response = requests.post(
                f"{JIRA_URL}/rest/api/2/issue",
                headers=headers,
                json=issue_data,
                timeout=30
            )
            
            if response.status_code == 201:
                issue_key = response.json()['key']
                print(f"‚úÖ Jira issue created: {issue_key}")
            else:
                print(f"‚ö†Ô∏è Jira issue creation failed: {response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è Jira integration error: {e}")
        EOF
    
    - name: Pipeline Summary
      if: always()
      run: |
        echo "========================================="
        echo "TEKTON PIPELINE EXECUTION SUMMARY"
        echo "========================================="
        echo "Pipeline Run: ${{ env.PIPELINE_RUN_NAME }}"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Actor: ${{ github.actor }}"
        echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
        echo "Image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image-tag || github.sha }}"
        echo "========================================="
        echo "‚úÖ Tekton pipeline orchestration completed"
        echo "üìä Results available in GitHub Actions artifacts"
        echo "üé´ Jira issue created for tracking"
        echo "========================================="
