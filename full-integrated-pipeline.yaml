apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: full-integrated-pipeline
  namespace: ml-pipeline
  annotations:
    description: "Complete pipeline with Grafana, ArgoCD, and Jira integration"
spec:
  description: "ML Pipeline with full observability and issue tracking"
  workspaces:
    - name: shared-data
  params:
    - name: git-url
      type: string
      default: "https://github.com/almightymoon/Pipeline.git"
    - name: git-revision
      type: string
      default: "main"
    - name: image-registry
      type: string
      default: "harbor.example.com/ml-team"
    - name: image-tag
      type: string
      default: "latest"
    - name: project-type
      type: string
      default: "python"
  
  tasks:
    # STEP 1: Notify Jira - Pipeline Started
    - name: jira-notify-start
      taskRef:
        name: jira-pipeline-started
      params:
        - name: pipeline-name
          value: "$(context.pipelineRun.name)"
        - name: git-url
          value: "$(params.git-url)"
        - name: git-revision
          value: "$(params.git-revision)"
    
    # STEP 2: Clone Repository
    - name: git-clone
      runAfter: [jira-notify-start]
      taskRef:
        name: enhanced-git-clone
      params:
        - name: url
          value: "$(params.git-url)"
        - name: revision
          value: "$(params.git-revision)"
      workspaces:
        - name: output
          workspace: shared-data
    
    # STEP 3: Build
    - name: build-image
      runAfter: [git-clone]
      taskRef:
        name: enhanced-build
      params:
        - name: image
          value: "$(params.image-registry):$(params.image-tag)"
        - name: project-type
          value: "$(params.project-type)"
      workspaces:
        - name: source
          workspace: shared-data
    
    # STEP 4: Test
    - name: test-application
      runAfter: [build-image]
      taskRef:
        name: enhanced-test
      params:
        - name: project-type
          value: "$(params.project-type)"
      workspaces:
        - name: source
          workspace: shared-data
    
    # STEP 5: Report Test Bugs to Jira
    - name: jira-report-bugs
      runAfter: [test-application]
      taskRef:
        name: jira-report-bugs
      params:
        - name: pipeline-name
          value: "$(context.pipelineRun.name)"
        - name: test-results
          value: "$(tasks.test-application.results.test-results)"
        - name: failed-tests
          value: "1"
    
    # STEP 6: Send Metrics to Prometheus
    - name: send-metrics
      runAfter: [test-application]
      taskRef:
        name: send-metrics
      params:
        - name: pipeline-name
          value: "$(context.pipelineRun.name)"
        - name: status
          value: "success"
        - name: duration
          value: "60"
  
  finally:
    # Update Jira on Success
    - name: jira-update-success
      when:
        - input: "$(tasks.status)"
          operator: notin
          values: ["Failed"]
      taskRef:
        name: jira-notify
      params:
        - name: summary
          value: "Pipeline $(context.pipelineRun.name) Completed Successfully"
        - name: description
          value: "Pipeline completed. Tests: $(tasks.test-application.results.test-results). Coverage: $(tasks.test-application.results.coverage)%. View at Grafana: http://213.109.162.134:30102"
        - name: priority
          value: "Low"
    
    # Report Critical Failure
    - name: jira-report-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        name: jira-notify
      params:
        - name: summary
          value: "URGENT: Pipeline $(context.pipelineRun.name) FAILED"
        - name: description
          value: "Pipeline execution FAILED. Check Grafana and logs immediately. ArgoCD: http://213.109.162.134:32146"
        - name: priority
          value: "Critical"

